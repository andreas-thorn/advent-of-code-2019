from collections import defaultdict, namedtuple, deque

input_data = """#################################################################################
#...#...#...#...........#.....#.......#.#.....#.........#...............#.......#
#.#.#.#.#.#.#####.#####.#.#T#.#.###.#.#.#.#.###.###.###.###P#########.###.#####.#
#.#...#.#.#v....#...#k..#.#.#.#.#.Z.#...#.#.#.....#.#l#.....#.........#.......#.#
#.#####.#.#####.#####.###.#.#.#.#.#####.#.###.#####.#.#######.#########.#######.#
#...#...#.#...#.#...#.....#.#.#.#.#...#.#.....#.#...#...........#.....#.#.#.S...#
#.#.###.#.#.#H#.#.#.#######.#.###.#.#.#.#.#####.#.###.###########.###.#.#.#.###.#
#.#...#...#.#.#.#.#.........#...#.#.#...#.#...#.#...#...#.........#.#.....#.#...#
#.###.#######.#.#.#####.#######.#.#####.#.#.#.#O###.###.#.#########.#######.#.###
#...#.#.....#.#.#.#.....#....b#.#.....#.#.#.#...#.#.#...#.#...#.......#.....#...#
###.#.#.###.#.#.#.#.#####.###.#.#####.#.#.#.###.#.#.#.###.#.###.#####.#.#######.#
#...#...#...#.#.#.#.....#.#...#.......#.#.#.#.#...#.#...#.#...#.#.#...#.#...#...#
#.#######.###.#.#.#######.#.###########.#.#.#.#.###.#.###.#.#.#.#E#.###.#.#.#.###
#.#...#.#.#.....#.#.......#.....#.#...A.#...#.#.#...#.#...#.#.#...#...#.#.#.....#
#.#.#.#.#.#####.#.#.###########.#.#.#########.#.#.#####.###.#.###.###.#.#######.#
#...#...#.#.Y.#.#.#...#.....#...#...#...#.......#...#...#...#.......#.#.......#.#
###.#####.#.#.#.#.#.###G###.#.###.###.#.#####.#####.#.#######.#######.#######.#.#
#.#.#.....#.#.#...#.#...#u#...#.#.....#.#...#.#.....#.......#.#...#.........#.#.#
#.#.#.###.#.#.#####.#.###.#####.#######.#.#.###.###########.###.#.#.#.#######.###
#...#.#...#.#......w#.#.#...#.........#.#.#...#.........#.......#...#.#.....#...#
#####.#####.#########.#.#.#.#.#.###.###.#.###.#.#######.#.###########.#.###.###.#
#..q#.....#.....#...#.#...#.#.#.#...#.F.#.#.#.#.......#.....#...#.....#.#.#.....#
#.#.#.###.#####.#.#.#######.#.#.#.###.###.#.#.#################.#.#####.#.#####.#
#.#.#...#.....#.#.#.........#.#.#...#...#...#.....#...#.........#.#.....#...#...#
#.#.#####.#####.###.###.#####D#.#######.###.#####.#.#.#.#########.#.#######.#.###
#.#.#.....#.....#...#...#.....#.......#.#.#.....#...#...#.........#.......#...#.#
#.#.#.#.###.#####.#######.#########.###.#.#####.###########.#############.#.###.#
#.#.#.#.#...#.........#...#.......#.....#.....#...#.......#.#.....#.......#...#.#
#.#.#.#.#.#####R#####.#.###.###.#########.###.###.#.#####.#.#####.#.#########.#.#
#.#.#.#.#.....#.#...#...#...#...#.......#...#...#.#...#.#.#.......#...#.....#.#.#
#.#L#.#######.#.#.#.#####.#######.#####.###.###.#.###.#.#.#####.#####.###.#.#.#.#
#.#.#.#...In..#.#.#...#.........#.....#.#...#.#.#.....#.#.#.#...#...#...#.#.#...#
#.#.#.#.#######.#.###X#.#######.#.#####.#.###.#.#######.#.#.#.###.#.###.#.#.###.#
#.#...#.#.....#...#...#...#...#.#.#.....#.#...#.........#.#...#...#...#.#.#.....#
#.###.#.###.#.#####.#####.#.#.#.#.#.#####.#.#.###.#######.###.#.#####.#.#.#######
#c#.#.#.....#...#.......#.#.#.#...#.....#.#j#...#.#.....#...#.#...#...#.#...#...#
#.#.#.#########.#######.#.#.#.#####.###.#.###.###.#.###.###.#.###.#.###.###.#.#.#
#.#.....#....m#.....#...#.#.#.....#...#.#.#...#...#.#.#...#.#...#.#...#.#.#.#.#.#
#.#######.#.#######.#.#####.#####.#####.#.#.#.#.###.#.###.#.#####.###.#.#.#.###.#
#.........#.........#.......#...............#.#.........#.........#.....#.......#
#######################################.@.#######################################
#.#...#...#...................#.....#.....................#.........#.......#...#
#.#.#.#.#.#.#######.#######.###J#.#.###.#.###.#############.###.###.#####.#.###.#
#...#.#.#...#.....#.#.#.....#...#.#...#.#.#...#...#.........#...#.#.......#r....#
#.###.#######.###.#.#.#.#####.###.###.#.#.#.###.#.#.#########.###.#############.#
#.#.#.......#.#.#.#...#.........#.#...#.#.#.....#...#x#.......#.......#..d......#
#.#.#######.#.#.#.###.###########.#.###.###########.#.#.#######.#####.#.#########
#...#.......#.#.#...#.#.......#...#.....#.........#...#.#.......#...#.#...#.....#
###.#.#####Q#.#.###.#.#.#.###.#.#.#######.#######.#####.#.#######.#.#####.#.###.#
#.#.#.#.....#.#.#.W.#.#.#...#.#.#.#.....#.#...........#.#.........#...#...#.#...#
#.#.#.#####.#.#.#.###.#####.#.#.###.###.#.###########.#.#.###########.#.###.#.###
#...#.#...#.#.#.#.#.........#.#.....#...#.....#...#.#...#.....#.......#.#...#...#
#.###.#.#.###.#.#.###########.#######.###.###.#.#.#.#########.#U#####.#.#####.#.#
#.#.C.#.#...#.#.#.....#.....#.#.....#...#...#...#.#...#.....#.#.#.....#.#...#.#.#
#.#.###.###.#.#.#####.#####.#.#.###.###.###.#####.#.#.#.#.###.#.#.#####.#.#.#.#.#
#.#.....#.#.#...#.#.B.#...#...#.#.#.....#.#...#.#.#.#...#.#...#.#...#...#.#.#.#.#
#.#####.#.#.###.#.#.###.#.#.###.#.#####.#.###.#.#.#.#####.#.###.#####.###.#.###.#
#.#...#...#...#.#.#...#.#.#...#.#...#...#...#...#.#.#...#...#.#.......#...#...#.#
#.#.#.#####.#.#.#.###.#.#.#####.#.###.#####.#.###.###.#.###.#.#########.#####.#.#
#.#.#...M...#.#.#...#.#.#...#...#.......#...#.#...#...#...#.......#.....#...#...#
#.#.#########.#.###.#.#.###.#.###########.###.#.#.#.#####.#.#####.#.#####.#.###.#
#.#.........#.#.#...#g#.#.#.#.....#.....#.....#.#.#.#...#.#.#...#...#.....#...#.#
#.#########.#.#.#.#.###.#.#.#####.#.###.#######.#.#.#.#.#.#####.#####.#####.#.#.#
#.......#...#.#.#.#.#...#...#f..#.....#.#.......#.#...#.#.....#...#...#.....#.#.#
#####.###.###.#.#.#.#.#####.#.#.#####.#.#.#######.#####.###.#####.###.#.#####.#.#
#.....#...#i..#y#.#...#...#...#.....#.#.#.#.....#.#...#.#.#.....#...#.#.#.....#.#
#.#####.###.###.#.###.#.#.#########.###.#.#.#.###.###.#.#.#####.###.#.#.#####.#.#
#.....#.#...#.N.#...#.#.#.......#.......#.#.#.........#.#...#.....#.#.#.....#.#.#
#####.#.#####.#####.#.#.#######.#######.#.#############.###.#.#####.#.#####.###.#
#...#.#.......#.....#.#...#...#.......#.#.......#a......#...#.....#.#.V.#...#...#
#.#.#.#########.###.#####.#.#########.#.#.#####.#.#######.#.#####.#.###.#.#.#.###
#.#.#.#..s....#.#...#.....#.........#.#.#.#...#.#.#.......#.#..t..#.#...#.#.#...#
#.#.#.#####.#.#.#####.#####.#######.#.#.#.#.###.#.#.#######.#.#####.#####.#####.#
#.#.#..p#...#...#...#...#.......#...#.#.#.#...#...#.......#.#.....#.....#.....#.#
#.#.###.#.#.#####.#.###.#.#######.###.#.#.###.###########.#######.#####.###.#.#.#
#.#o#...#.#.#.....#.....#...#...#...#.#.#...........#.....#.......#...#.#...#.#.#
#.###.###.###.#########.#####.#.###.#.#.###########.#.###.#.#######.#.#.#.#####.#
#...#...#.........#...#.......#.....#.#.#.......#...#.#.#.#.....#..h#.#.#...#...#
#.#.###.###########.#.###############.#.#.#####.#.###.#.#.#####K#.###.#.#.#.#.###
#.#.................#e................#.#z....#.......#.......#.....#...#.#.....#
#################################################################################"""


def parse_map():
    result = list()
    robot = None
    door_keys, doors = set(), set()

    for y, row in enumerate(input_data.split('\n')):
        new_row = []
        for x, char in enumerate(row):
            new_row.append(char)
            if char == "@":
                robot = (x, y)
            elif 'a' <= char <= 'z':
                door_keys.add(char)
            elif 'A' <= char <= 'Z':
                doors.add(char)
        result.append(new_row)

    return result, robot, door_keys, doors

def part_one():
    tunnel_map, robot_coordinate, door_keys, doors = parse_map()
    step = namedtuple('Step', ['x', 'y', 'd_keys', 'distance'])
    start = step(robot_coordinate[0], robot_coordinate[1], set(), 0)

    steps = deque()
    steps.append(start)

    visited_steps = set()
    rounds = 0
    while steps:
        rounds += 1
        current_step = steps.popleft()
        key = (current_step.x, current_step.y, tuple(sorted(current_step.d_keys)))

        if key in visited_steps:
            continue

        visited_steps.add(key)

        char = tunnel_map[current_step.y][current_step.x]
        current_keys = set(current_step.d_keys)

        if char == "#":
            continue
        elif char in doors and char.lower() not in current_keys:
            continue
        elif char in door_keys:
            current_keys.add(char)
            if current_keys == door_keys:
                print(current_step.distance)
                break

        for direction in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
            temp_x = current_step.x + direction[0]
            temp_y = current_step.y + direction[1]
            if not (0 <= temp_x < len(tunnel_map[0]) and 0 <= temp_y < len(tunnel_map)):
                continue

            steps.append(step(temp_x, temp_y, current_keys, current_step.distance + 1))

    print("Part one: %s" % rounds)


if __name__ == '__main__':
    part_one()
